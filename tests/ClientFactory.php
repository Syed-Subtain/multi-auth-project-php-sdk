<?php

declare(strict_types=1);

/*
 * MultiAuthSampleLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace MultiAuthSampleLib\Tests;

use Core\Types\CallbackCatcher;
use MultiAuthSampleLib\Authentication\ApiHeaderCredentialsBuilder;
use MultiAuthSampleLib\Authentication\ApiKeyCredentialsBuilder;
use MultiAuthSampleLib\Authentication\BasicAuthCredentialsBuilder;
use MultiAuthSampleLib\Authentication\OAuthACGCredentialsBuilder;
use MultiAuthSampleLib\Authentication\OAuthBearerTokenCredentialsBuilder;
use MultiAuthSampleLib\Authentication\OAuthCCGCredentialsBuilder;
use MultiAuthSampleLib\Authentication\OAuthROPCGCredentialsBuilder;
use MultiAuthSampleLib\MultiAuthSampleClient;
use MultiAuthSampleLib\MultiAuthSampleClientBuilder;

class ClientFactory
{
    public static function create(CallbackCatcher $httpCallback): MultiAuthSampleClient
    {
        $clientBuilder = MultiAuthSampleClientBuilder::init();
        $clientBuilder = self::addConfigurationFromEnvironment($clientBuilder);
        $clientBuilder = self::addTestConfiguration($clientBuilder);
        $client = $clientBuilder->httpCallback($httpCallback)->build();
        $oAuthToken = $client->getOAuthCCGCredentials()->fetchToken();
        $clientBuilder->oAuthCCGCredentials($client->getOAuthCCGCredentialsBuilder()->oAuthToken($oAuthToken));
        $oAuthToken = $client->getOAuthACGCredentials()->fetchToken('910b000d4f');
        $clientBuilder->oAuthACGCredentials($client->getOAuthACGCredentialsBuilder()->oAuthToken($oAuthToken));
        $oAuthToken = $client->getOAuthROPCGCredentials()->fetchToken();
        $clientBuilder->oAuthROPCGCredentials($client->getOAuthROPCGCredentialsBuilder()->oAuthToken($oAuthToken));
        return $clientBuilder->build();
    }

    public static function addTestConfiguration(MultiAuthSampleClientBuilder $builder): MultiAuthSampleClientBuilder
    {
        return $builder->accessToken2('azHmdOe09EdchxeWsdnplkQbv76sJH');
    }

    public static function addConfigurationFromEnvironment(
        MultiAuthSampleClientBuilder $builder
    ): MultiAuthSampleClientBuilder {
        $timeout = getenv('MULTI_AUTH_SAMPLE_LIB_TIMEOUT');
        $numberOfRetries = getenv('MULTI_AUTH_SAMPLE_LIB_NUMBER_OF_RETRIES');
        $maximumRetryWaitTime = getenv('MULTI_AUTH_SAMPLE_LIB_MAXIMUM_RETRY_WAIT_TIME');
        $accessToken2 = getenv('MULTI_AUTH_SAMPLE_LIB_ACCESS_TOKEN_2');
        $environment = getenv('MULTI_AUTH_SAMPLE_LIB_ENVIRONMENT');
        $port = getenv('MULTI_AUTH_SAMPLE_LIB_PORT');
        $suites = getenv('MULTI_AUTH_SAMPLE_LIB_SUITES');
        $username = getenv('MULTI_AUTH_SAMPLE_LIB_USERNAME');
        $password = getenv('MULTI_AUTH_SAMPLE_LIB_PASSWORD');
        $token = getenv('MULTI_AUTH_SAMPLE_LIB_TOKEN');
        $apiKey = getenv('MULTI_AUTH_SAMPLE_LIB_API_KEY');
        $token2 = getenv('MULTI_AUTH_SAMPLE_LIB_TOKEN_2');
        $apiKey2 = getenv('MULTI_AUTH_SAMPLE_LIB_API_KEY_2');
        $oAuthClientId = getenv('MULTI_AUTH_SAMPLE_LIB_O_AUTH_CLIENT_ID');
        $oAuthClientSecret = getenv('MULTI_AUTH_SAMPLE_LIB_O_AUTH_CLIENT_SECRET');
        $oAuthClientId2 = getenv('MULTI_AUTH_SAMPLE_LIB_O_AUTH_CLIENT_ID_2');
        $oAuthClientSecret2 = getenv('MULTI_AUTH_SAMPLE_LIB_O_AUTH_CLIENT_SECRET_2');
        $oAuthRedirectUri2 = getenv('MULTI_AUTH_SAMPLE_LIB_O_AUTH_REDIRECT_URI_2');
        $oAuthClientId3 = getenv('MULTI_AUTH_SAMPLE_LIB_O_AUTH_CLIENT_ID_3');
        $oAuthClientSecret3 = getenv('MULTI_AUTH_SAMPLE_LIB_O_AUTH_CLIENT_SECRET_3');
        $oAuthUsername3 = getenv('MULTI_AUTH_SAMPLE_LIB_O_AUTH_USERNAME_3');
        $oAuthPassword3 = getenv('MULTI_AUTH_SAMPLE_LIB_O_AUTH_PASSWORD_3');
        $accessToken = getenv('MULTI_AUTH_SAMPLE_LIB_ACCESS_TOKEN');

        if (!empty($timeout) && \is_numeric($timeout)) {
            $builder->timeout(intval($timeout));
        }

        if (!empty($numberOfRetries) && \is_numeric($numberOfRetries)) {
            $builder->numberOfRetries(intval($numberOfRetries));
        }

        if (!empty($maximumRetryWaitTime) && \is_numeric($maximumRetryWaitTime)) {
            $builder->maximumRetryWaitTime(intval($maximumRetryWaitTime));
        }

        if (!empty($accessToken2)) {
            $builder->accessToken2($accessToken2);
        }

        if (!empty($environment)) {
            $builder->environment($environment);
        }

        if (!empty($port)) {
            $builder->port($port);
        }

        if (!empty($suites) && \is_numeric($suites)) {
            $builder->suites(intval($suites));
        }

        if (!empty($username) && !empty($password)) {
            $builder->basicAuthCredentials(BasicAuthCredentialsBuilder::init($username, $password));
        }

        if (!empty($token) && !empty($apiKey)) {
            $builder->apiKeyCredentials(ApiKeyCredentialsBuilder::init($token, $apiKey));
        }

        if (!empty($token2) && !empty($apiKey2)) {
            $builder->apiHeaderCredentials(ApiHeaderCredentialsBuilder::init($token2, $apiKey2));
        }

        if (!empty($oAuthClientId) && !empty($oAuthClientSecret)) {
            $builder->oAuthCCGCredentials(OAuthCCGCredentialsBuilder::init($oAuthClientId, $oAuthClientSecret));
        }

        if (!empty($oAuthClientId2) && !empty($oAuthClientSecret2) && !empty($oAuthRedirectUri2)) {
            $builder->oAuthACGCredentials(
                OAuthACGCredentialsBuilder::init($oAuthClientId2, $oAuthClientSecret2, $oAuthRedirectUri2)
            );
        }

        if (
            !empty($oAuthClientId3) &&
            !empty($oAuthClientSecret3) &&
            !empty($oAuthUsername3) &&
            !empty($oAuthPassword3)
        ) {
            $builder->oAuthROPCGCredentials(OAuthROPCGCredentialsBuilder::init(
                $oAuthClientId3,
                $oAuthClientSecret3,
                $oAuthUsername3,
                $oAuthPassword3
            ));
        }

        if (!empty($accessToken)) {
            $builder->oAuthBearerTokenCredentials(OAuthBearerTokenCredentialsBuilder::init($accessToken));
        }

        return $builder;
    }
}
