<?php

declare(strict_types=1);

/*
 * MultiAuthSampleLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace MultiAuthSampleLib\Tests\Controllers;

use Core\TestCase\BodyMatchers\RawBodyMatcher;
use MultiAuthSampleLib\Controllers\AuthenticationController;
use MultiAuthSampleLib\Exceptions;

class AuthenticationControllerTest extends BaseTestController
{
    /**
     * @var AuthenticationController AuthenticationController instance
     */
    protected static $controller;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass(): void
    {
        self::$controller = parent::getClient()->getAuthenticationController();
    }

    public function testOAuth2Test()
    {
        // Perform API call
        $result = null;
        try {
            $result = self::$controller->oAuthBearerToken();
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->bodyMatcher(RawBodyMatcher::init('You\'ve passed the test!'))
            ->assert();
    }

    public function testCustomAuthenticationTest()
    {
        // Perform API call
        $result = null;
        try {
            $result = self::$controller->customAuthentication();
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->bodyMatcher(RawBodyMatcher::init('You\'ve passed the test!'))
            ->assert();
    }

    public function testCustomQueryParamTest()
    {
        // Perform API call
        $result = null;
        try {
            $result = self::$controller->customQueryOrHeaderAuthentication();
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->bodyMatcher(RawBodyMatcher::init('You\'ve passed the test!'))
            ->assert();
    }

    public function testOAuthOrCombinationTest()
    {
        // Perform API call
        $result = null;
        try {
            $result = self::$controller->oAuthGrantTypesORCombinations();
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->bodyMatcher(RawBodyMatcher::init('You\'ve passed the test!'))
            ->assert();
    }

    public function testCheckServiceStatus()
    {
        // Perform API call
        $result = null;
        try {
            $result = self::$controller->oAuthClientCredentialsGrant();
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase($result)->expectStatus(200)->assert();
    }

    public function testBasicAuthAndApiKeyAndApiHeader()
    {
        // Perform API call
        $result = null;
        try {
            $result = self::$controller->basicAuthAndApiHeaderAuth();
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->bodyMatcher(RawBodyMatcher::init('You\'ve passed the test!'))
            ->assert();
    }

    /**
     * @phan-suppress PhanDeprecatedFunction
     */
    public function testMultipleAuthOrCombinationTest()
    {
        // Perform API call
        $result = null;
        try {
            $result = self::$controller->multipleAuthCombination();
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->bodyMatcher(RawBodyMatcher::init('You\'ve passed the test!'))
            ->assert();
    }
}
