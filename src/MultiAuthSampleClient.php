<?php

declare(strict_types=1);

/*
 * MultiAuthSampleLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace MultiAuthSampleLib;

use Core\ClientBuilder;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\TemplateParam;
use Core\Utils\CoreHelper;
use MultiAuthSampleLib\Authentication\ApiHeaderCredentials;
use MultiAuthSampleLib\Authentication\ApiHeaderCredentialsBuilder;
use MultiAuthSampleLib\Authentication\ApiHeaderManager;
use MultiAuthSampleLib\Authentication\ApiKeyCredentials;
use MultiAuthSampleLib\Authentication\ApiKeyCredentialsBuilder;
use MultiAuthSampleLib\Authentication\ApiKeyManager;
use MultiAuthSampleLib\Authentication\BasicAuthCredentials;
use MultiAuthSampleLib\Authentication\BasicAuthCredentialsBuilder;
use MultiAuthSampleLib\Authentication\BasicAuthManager;
use MultiAuthSampleLib\Authentication\CustomAuthManager;
use MultiAuthSampleLib\Authentication\OAuthACGCredentials;
use MultiAuthSampleLib\Authentication\OAuthACGCredentialsBuilder;
use MultiAuthSampleLib\Authentication\OAuthACGManager;
use MultiAuthSampleLib\Authentication\OAuthBearerTokenCredentials;
use MultiAuthSampleLib\Authentication\OAuthBearerTokenCredentialsBuilder;
use MultiAuthSampleLib\Authentication\OAuthBearerTokenManager;
use MultiAuthSampleLib\Authentication\OAuthCCGCredentials;
use MultiAuthSampleLib\Authentication\OAuthCCGCredentialsBuilder;
use MultiAuthSampleLib\Authentication\OAuthCCGManager;
use MultiAuthSampleLib\Authentication\OAuthROPCGCredentials;
use MultiAuthSampleLib\Authentication\OAuthROPCGCredentialsBuilder;
use MultiAuthSampleLib\Authentication\OAuthROPCGManager;
use MultiAuthSampleLib\Controllers\AuthenticationController;
use MultiAuthSampleLib\Controllers\OAuthAuthorizationController;
use MultiAuthSampleLib\Utils\CompatibilityConverter;
use Unirest\Configuration;
use Unirest\HttpClient;

class MultiAuthSampleClient implements ConfigurationInterface
{
    private $authentication;

    private $oAuthAuthorization;

    private $basicAuthManager;

    private $apiKeyManager;

    private $apiHeaderManager;

    private $oAuthCCGManager;

    private $oAuthACGManager;

    private $oAuthROPCGManager;

    private $oAuthBearerTokenManager;

    private $config;

    private $client;

    /**
     * @see MultiAuthSampleClientBuilder::init()
     * @see MultiAuthSampleClientBuilder::build()
     *
     * @param array $config
     */
    public function __construct(array $config = [])
    {
        $this->config = array_merge(ConfigurationDefaults::_ALL, CoreHelper::clone($config));
        $this->basicAuthManager = new BasicAuthManager(
            $this->config['username'] ?? ConfigurationDefaults::USERNAME,
            $this->config['password'] ?? ConfigurationDefaults::PASSWORD
        );
        $this->apiKeyManager = new ApiKeyManager(
            $this->config['token'] ?? ConfigurationDefaults::TOKEN,
            $this->config['apiKey'] ?? ConfigurationDefaults::API_KEY
        );
        $this->apiHeaderManager = new ApiHeaderManager(
            $this->config['token2'] ?? ConfigurationDefaults::TOKEN_2,
            $this->config['apiKey2'] ?? ConfigurationDefaults::API_KEY_2
        );
        $this->oAuthCCGManager = new OAuthCCGManager(
            $this->config['oAuthClientId'] ?? ConfigurationDefaults::O_AUTH_CLIENT_ID,
            $this->config['oAuthClientSecret'] ?? ConfigurationDefaults::O_AUTH_CLIENT_SECRET,
            $this->config['oAuthToken']
        );
        $this->oAuthACGManager = new OAuthACGManager(
            $this->config['oAuthClientId2'] ?? ConfigurationDefaults::O_AUTH_CLIENT_ID_2,
            $this->config['oAuthClientSecret2'] ?? ConfigurationDefaults::O_AUTH_CLIENT_SECRET_2,
            $this->config['oAuthRedirectUri2'] ?? ConfigurationDefaults::O_AUTH_REDIRECT_URI_2,
            $this->config['oAuthToken2'],
            $this->config['oAuthScopes']
        );
        $this->oAuthROPCGManager = new OAuthROPCGManager(
            $this->config['oAuthClientId3'] ?? ConfigurationDefaults::O_AUTH_CLIENT_ID_3,
            $this->config['oAuthClientSecret3'] ?? ConfigurationDefaults::O_AUTH_CLIENT_SECRET_3,
            $this->config['oAuthUsername3'] ?? ConfigurationDefaults::O_AUTH_USERNAME_3,
            $this->config['oAuthPassword3'] ?? ConfigurationDefaults::O_AUTH_PASSWORD_3,
            $this->config['oAuthToken3']
        );
        $this->oAuthBearerTokenManager = new OAuthBearerTokenManager(
            $this->config['accessToken'] ?? ConfigurationDefaults::ACCESS_TOKEN
        );
        $customAuthManager = new CustomAuthManager($this);
        $this->validateConfig();
        $this->client = ClientBuilder::init(new HttpClient(Configuration::init($this)))
            ->converter(new CompatibilityConverter())
            ->jsonHelper(ApiHelper::getJsonHelper())
            ->apiCallback($this->config['httpCallback'] ?? null)
            ->userAgent('APIMATIC 3.0')
            ->globalConfig($this->getGlobalConfiguration())
            ->serverUrls(self::ENVIRONMENT_MAP[$this->getEnvironment()], Server::DEFAULT_)
            ->authManagers([
                'basicAuth' => $this->basicAuthManager,
                'apiKey' => $this->apiKeyManager,
                'apiHeader' => $this->apiHeaderManager,
                'OAuthCCG' => $this->oAuthCCGManager,
                'OAuthACG' => $this->oAuthACGManager,
                'OAuthROPCG' => $this->oAuthROPCGManager,
                'OAuthBearerToken' => $this->oAuthBearerTokenManager,
                'CustomAuth' => $customAuthManager
            ])
            ->build();
        $this->oAuthCCGManager->setClient($this->client);
        $this->oAuthACGManager->setClient($this->client);
        $this->oAuthROPCGManager->setClient($this->client);
    }

    /**
     * Create a builder with the current client's configurations.
     *
     * @return MultiAuthSampleClientBuilder MultiAuthSampleClientBuilder instance
     */
    public function toBuilder(): MultiAuthSampleClientBuilder
    {
        $builder = MultiAuthSampleClientBuilder::init()
            ->timeout($this->getTimeout())
            ->enableRetries($this->shouldEnableRetries())
            ->numberOfRetries($this->getNumberOfRetries())
            ->retryInterval($this->getRetryInterval())
            ->backOffFactor($this->getBackOffFactor())
            ->maximumRetryWaitTime($this->getMaximumRetryWaitTime())
            ->retryOnTimeout($this->shouldRetryOnTimeout())
            ->httpStatusCodesToRetry($this->getHttpStatusCodesToRetry())
            ->httpMethodsToRetry($this->getHttpMethodsToRetry())
            ->accessToken2($this->getAccessToken2())
            ->environment($this->getEnvironment())
            ->port($this->getPort())
            ->suites($this->getSuites())
            ->httpCallback($this->config['httpCallback'] ?? null);

        $basicAuth = $this->getBasicAuthCredentialsBuilder();
        if ($basicAuth != null) {
            $builder->basicAuthCredentials($basicAuth);
        }

        $apiKey = $this->getApiKeyCredentialsBuilder();
        if ($apiKey != null) {
            $builder->apiKeyCredentials($apiKey);
        }

        $apiHeader = $this->getApiHeaderCredentialsBuilder();
        if ($apiHeader != null) {
            $builder->apiHeaderCredentials($apiHeader);
        }

        $oAuthCCG = $this->getOAuthCCGCredentialsBuilder();
        if ($oAuthCCG != null) {
            $builder->oAuthCCGCredentials($oAuthCCG);
        }

        $oAuthACG = $this->getOAuthACGCredentialsBuilder();
        if ($oAuthACG != null) {
            $builder->oAuthACGCredentials($oAuthACG);
        }

        $oAuthROPCG = $this->getOAuthROPCGCredentialsBuilder();
        if ($oAuthROPCG != null) {
            $builder->oAuthROPCGCredentials($oAuthROPCG);
        }

        $oAuthBearerToken = $this->getOAuthBearerTokenCredentialsBuilder();
        if ($oAuthBearerToken != null) {
            $builder->oAuthBearerTokenCredentials($oAuthBearerToken);
        }
        return $builder;
    }

    public function getTimeout(): int
    {
        return $this->config['timeout'] ?? ConfigurationDefaults::TIMEOUT;
    }

    public function shouldEnableRetries(): bool
    {
        return $this->config['enableRetries'] ?? ConfigurationDefaults::ENABLE_RETRIES;
    }

    public function getNumberOfRetries(): int
    {
        return $this->config['numberOfRetries'] ?? ConfigurationDefaults::NUMBER_OF_RETRIES;
    }

    public function getRetryInterval(): float
    {
        return $this->config['retryInterval'] ?? ConfigurationDefaults::RETRY_INTERVAL;
    }

    public function getBackOffFactor(): float
    {
        return $this->config['backOffFactor'] ?? ConfigurationDefaults::BACK_OFF_FACTOR;
    }

    public function getMaximumRetryWaitTime(): int
    {
        return $this->config['maximumRetryWaitTime'] ?? ConfigurationDefaults::MAXIMUM_RETRY_WAIT_TIME;
    }

    public function shouldRetryOnTimeout(): bool
    {
        return $this->config['retryOnTimeout'] ?? ConfigurationDefaults::RETRY_ON_TIMEOUT;
    }

    public function getHttpStatusCodesToRetry(): array
    {
        return $this->config['httpStatusCodesToRetry'] ?? ConfigurationDefaults::HTTP_STATUS_CODES_TO_RETRY;
    }

    public function getHttpMethodsToRetry(): array
    {
        return $this->config['httpMethodsToRetry'] ?? ConfigurationDefaults::HTTP_METHODS_TO_RETRY;
    }

    public function getAccessToken2(): string
    {
        return $this->config['accessToken2'] ?? ConfigurationDefaults::ACCESS_TOKEN_2;
    }

    public function getEnvironment(): string
    {
        return $this->config['environment'] ?? ConfigurationDefaults::ENVIRONMENT;
    }

    public function getPort(): string
    {
        return $this->config['port'] ?? ConfigurationDefaults::PORT;
    }

    public function getSuites(): int
    {
        return $this->config['suites'] ?? ConfigurationDefaults::SUITES;
    }

    public function getBasicAuthCredentials(): BasicAuthCredentials
    {
        return $this->basicAuthManager;
    }

    public function getBasicAuthCredentialsBuilder(): ?BasicAuthCredentialsBuilder
    {
        if (empty($this->basicAuthManager->getUsername()) && empty($this->basicAuthManager->getPassword())) {
            return null;
        }
        return BasicAuthCredentialsBuilder::init(
            $this->basicAuthManager->getUsername(),
            $this->basicAuthManager->getPassword()
        );
    }

    public function getApiKeyCredentials(): ApiKeyCredentials
    {
        return $this->apiKeyManager;
    }

    public function getApiKeyCredentialsBuilder(): ?ApiKeyCredentialsBuilder
    {
        if (empty($this->apiKeyManager->getToken()) && empty($this->apiKeyManager->getApiKey())) {
            return null;
        }
        return ApiKeyCredentialsBuilder::init($this->apiKeyManager->getToken(), $this->apiKeyManager->getApiKey());
    }

    public function getApiHeaderCredentials(): ApiHeaderCredentials
    {
        return $this->apiHeaderManager;
    }

    public function getApiHeaderCredentialsBuilder(): ?ApiHeaderCredentialsBuilder
    {
        if (empty($this->apiHeaderManager->getToken()) && empty($this->apiHeaderManager->getApiKey())) {
            return null;
        }
        return ApiHeaderCredentialsBuilder::init(
            $this->apiHeaderManager->getToken(),
            $this->apiHeaderManager->getApiKey()
        );
    }

    public function getOAuthCCGCredentials(): OAuthCCGCredentials
    {
        return $this->oAuthCCGManager;
    }

    public function getOAuthCCGCredentialsBuilder(): ?OAuthCCGCredentialsBuilder
    {
        if (
            empty($this->oAuthCCGManager->getOAuthClientId()) &&
            empty($this->oAuthCCGManager->getOAuthClientSecret())
        ) {
            return null;
        }
        return OAuthCCGCredentialsBuilder::init(
            $this->oAuthCCGManager->getOAuthClientId(),
            $this->oAuthCCGManager->getOAuthClientSecret()
        )->oAuthToken($this->oAuthCCGManager->getOAuthToken());
    }

    public function getOAuthACGCredentials(): OAuthACGCredentials
    {
        return $this->oAuthACGManager;
    }

    public function getOAuthACGCredentialsBuilder(): ?OAuthACGCredentialsBuilder
    {
        if (
            empty($this->oAuthACGManager->getOAuthClientId()) &&
            empty($this->oAuthACGManager->getOAuthClientSecret()) &&
            empty($this->oAuthACGManager->getOAuthRedirectUri())
        ) {
            return null;
        }
        return OAuthACGCredentialsBuilder::init(
            $this->oAuthACGManager->getOAuthClientId(),
            $this->oAuthACGManager->getOAuthClientSecret(),
            $this->oAuthACGManager->getOAuthRedirectUri()
        )->oAuthToken($this->oAuthACGManager->getOAuthToken())->oAuthScopes($this->oAuthACGManager->getOAuthScopes());
    }

    public function getOAuthROPCGCredentials(): OAuthROPCGCredentials
    {
        return $this->oAuthROPCGManager;
    }

    public function getOAuthROPCGCredentialsBuilder(): ?OAuthROPCGCredentialsBuilder
    {
        if (
            empty($this->oAuthROPCGManager->getOAuthClientId()) &&
            empty($this->oAuthROPCGManager->getOAuthClientSecret()) &&
            empty($this->oAuthROPCGManager->getOAuthUsername()) &&
            empty($this->oAuthROPCGManager->getOAuthPassword())
        ) {
            return null;
        }
        return OAuthROPCGCredentialsBuilder::init(
            $this->oAuthROPCGManager->getOAuthClientId(),
            $this->oAuthROPCGManager->getOAuthClientSecret(),
            $this->oAuthROPCGManager->getOAuthUsername(),
            $this->oAuthROPCGManager->getOAuthPassword()
        )->oAuthToken($this->oAuthROPCGManager->getOAuthToken());
    }

    public function getOAuthBearerTokenCredentials(): OAuthBearerTokenCredentials
    {
        return $this->oAuthBearerTokenManager;
    }

    public function getOAuthBearerTokenCredentialsBuilder(): ?OAuthBearerTokenCredentialsBuilder
    {
        if (empty($this->oAuthBearerTokenManager->getAccessToken())) {
            return null;
        }
        return OAuthBearerTokenCredentialsBuilder::init($this->oAuthBearerTokenManager->getAccessToken());
    }

    /**
     * Get the client configuration as an associative array
     *
     * @see MultiAuthSampleClientBuilder::getConfiguration()
     */
    public function getConfiguration(): array
    {
        return $this->toBuilder()->getConfiguration();
    }

    /**
     * Clone this client and override given configuration options
     *
     * @see MultiAuthSampleClientBuilder::build()
     */
    public function withConfiguration(array $config): self
    {
        return new self(array_merge($this->config, $config));
    }

    /**
     * Validate required configuration variables
     */
    private function validateConfig(): void
    {
        $builder = MultiAuthSampleClientBuilder::init();

        $oAuthACG = $this->getOAuthACGCredentialsBuilder();
        if ($oAuthACG != null) {
            $builder->oAuthACGCredentials($oAuthACG);
        }
    }

    /**
     * Get the base uri for a given server in the current environment.
     *
     * @param string $server Server name
     *
     * @return string Base URI
     */
    public function getBaseUri(string $server = Server::DEFAULT_): string
    {
        return $this->client->getGlobalRequest($server)->getQueryUrl();
    }

    /**
     * Returns Authentication Controller
     */
    public function getAuthenticationController(): AuthenticationController
    {
        if ($this->authentication == null) {
            $this->authentication = new AuthenticationController($this->client);
        }
        return $this->authentication;
    }

    /**
     * Returns O Auth Authorization Controller
     */
    public function getOAuthAuthorizationController(): OAuthAuthorizationController
    {
        if ($this->oAuthAuthorization == null) {
            $this->oAuthAuthorization = new OAuthAuthorizationController($this->client);
        }
        return $this->oAuthAuthorization;
    }

    /**
     * Get the defined global configurations
     */
    private function getGlobalConfiguration(): array
    {
        return [
            TemplateParam::init('port', $this->getPort())->dontEncode(),
            TemplateParam::init('suites', $this->getSuites())->dontEncode(),
            HeaderParam::init('accessToken', $this->getAccessToken2())
        ];
    }

    /**
     * A map of all base urls used in different environments and servers
     *
     * @var array
     */
    private const ENVIRONMENT_MAP = [
        Environment::PRODUCTION => [
            Server::DEFAULT_ => 'http://apimatic.hopto.org:{suites}',
            Server::AUTH => 'http://apimaticauth.hopto.org:3000'
        ],
        Environment::TESTING => [
            Server::DEFAULT_ => 'http://localhost:3000',
            Server::AUTH => 'http://localhost:3000/oauth2/auth-server'
        ]
    ];
}
