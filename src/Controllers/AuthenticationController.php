<?php

declare(strict_types=1);

/*
 * MultiAuthSampleLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace MultiAuthSampleLib\Controllers;

use Core\Authentication\Auth;
use Core\Request\Parameters\QueryParam;
use CoreInterfaces\Core\Request\RequestMethod;
use MultiAuthSampleLib\Exceptions\ApiException;
use MultiAuthSampleLib\Models\ServiceStatus;
use MultiAuthSampleLib\Models\User;

class AuthenticationController extends BaseController
{
    /**
     * @return string Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function oAuthBearerToken(): string
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/auth/oauth2')->auth('OAuthBearerToken');

        return $this->execute($_reqBuilder);
    }

    /**
     * @return string Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function customAuthentication(): string
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/auth/customAuthentication')->auth('CustomAuth');

        return $this->execute($_reqBuilder);
    }

    /**
     * @return string Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function customQueryOrHeaderAuthentication(): string
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/auth/customQueryOrHeaderParam')
            ->auth('apiKey', 'apiHeader');

        return $this->execute($_reqBuilder);
    }

    /**
     * This endpoint tests or combinations of OAuth types
     *
     * @return string Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function oAuthGrantTypesORCombinations(): string
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/oauth2/oauthOrCombination')
            ->auth('OAuthCCG', 'OAuthBearerToken');

        return $this->execute($_reqBuilder);
    }

    /**
     * This endpoint does not use auth.
     *
     * @deprecated 0.0.1-alpha You should not use this method as it requires no auth and can bring
     *                         security issues to the server and api call itself!!
     *
     * @return string Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function noAuth(): string
    {
        trigger_error(
            'Method ' . __METHOD__ . ' is deprecated since version 0.0.1-alpha. You should not ' .
            'use this method as it requires no auth and can bring security issues to the server ' .
            'and api call itself!!',
            E_USER_DEPRECATED
        );

        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/auth/noAuth')
            ->parameters(QueryParam::init('array', true));

        return $this->execute($_reqBuilder);
    }

    /**
     * @return ServiceStatus Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function oAuthClientCredentialsGrant(): ServiceStatus
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/oauth2/non-auth-server/status')->auth('OAuthCCG');

        $_resHandler = $this->responseHandler()->type(ServiceStatus::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @return string Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function basicAuthAndApiHeaderAuth(): string
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/auth/basicAndApiKeyAndApiHeader')
            ->auth(Auth::and('basicAuth', 'apiKey', 'apiHeader'));

        return $this->execute($_reqBuilder);
    }

    /**
     * @return User Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function oAuthAuthorizationGrant(): User
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/oauth2/non-auth-server/user')
            ->auth(Auth::and('OAuthACG', 'OAuthROPCG'));

        $_resHandler = $this->responseHandler()->type(User::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * This endpoint uses globally applied auth which is a hypothetical scneraio but covers the worst case.
     *
     * @deprecated
     *
     * @return string Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function multipleAuthCombination(): string
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated.', E_USER_DEPRECATED);

        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/auth/multipleAuthCombination')
            ->auth('CustomAuth', 'OAuthBearerToken', Auth::and('basicAuth', 'apiKey', 'apiHeader'));

        return $this->execute($_reqBuilder);
    }
}
